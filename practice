#1121

pip install --upgrade openai

## API key 설정

import os
os.environ["OPENAI_API_KEY"]=""

# 1125

## 3끼 식단

import openai
client=openai.OpenAI()

response=client.chat.completions.create(
    model="gpt-4o",
    messages=[
        {"role": "system", "content": "사용자의 취향을 고려해서 식단을 짜주는 영양사가 되어줘."},
        {"role": "user", "content": "1인분 식단을 3끼 짜줘. 나는 비만이 있고 체중 감량이 목표야. 칼로리를 줄인 식단을 짜줘. 나는 새우 알러지가 있어. 한식 중심이면 좋겠고, 한 끼당 15000원 이하로 짜줘. 식단표 형태로 짜줘."}
    ]
)

print("Assistant: "+ response.choices[0].message.content)

response.usage

*   want_to
*   context 기억

want_to="""
content{}
"""

content="""사용자의 취향을 고려해서 식단을 짜주는 영양사가 되어줘. 다음은 사용자의 기본 정보야.
여성, 24세, 160cm, 55kg, 체중 감량이 목표,
당근 비선호, 짭짤한 음식 선호, 하루 평균 활동량은 보통, 음식 조리 난이도는 낮아야 함,
1인분 한 끼니 필요,
양식 면요리가 주메뉴, 새우가 들어가야 함
"""

# context 기억
def chatGPT (context, model_selection='gpt-4o'):
  response=client.chat.completions.create(
      model=model_selection,
      messages=context
  )
  return response.choices[-1].message.content

context=[{'role':'system', 'content':want_to.format(content)}]
while 1:
  user_message=input('Type your message: ')
  context.append({'role': 'user', 'content': user_message})

  if user_message=='exit':
    break
  AI_message=chatGPT(context)
  context.append({'role': 'assistant', 'content': AI_message})
  print(AI_message)

# 1127

from google.colab import drive

# 구글 드라이브 마운트
drive.mount('/content/drive')

pip install openai==0.28

import pandas as pd

# CSV 파일 로드
file_path = '/content/drive/MyDrive/start - fantasy/입력값.xlsx'  # 파일 경로
data = pd.read_excel(file_path)

# 데이터 미리 보기
print(data)

import openai

def query_gpt_with_excel(user_question, excel_data):
    # 엑셀 데이터를 문자열로 변환
    excel_content = excel_data.to_csv(index=False)

    # OpenAI에 보낼 프롬프트 생성
    prompt = f"""
    엑셀 파일이 하나 있어:
    {excel_content}

    이 데이터를 이용해서 질문에 대답해줘:
    {user_question}
    """

    # OpenAI API 호출
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "엑셀 파일에 있는 ID가 1인 사람의 정보를 이용해서 맞춤형 식단을 짜주고 재료와 자세한 레시피를 알려주고 재료별로 실제 상품까지 추천해줘"},
            {"role": "user", "content": prompt}
        ]
    )

    # 응답 반환
    return response['choices'][0]['message']['content']

# 사용자 질문 예시
user_question = "나의 정보를 고려해서 한 끼 식단을 짜줘"

# GPT-4로 질문 보내기
answer = query_gpt_with_excel(user_question, data)

# 결과 출력
print(answer)

print("수정을 원하는 부분이 있으면 알려주세요!")
while True:
    user_question = input("질문: ")

    if user_question.lower() == "exit":
        print("이용해 주셔서 감사합니다!")
        break

    try:
        # GPT-4로 질문 보내기
        answer = query_gpt_with_excel(user_question, data)
        print("Answer:", answer)
    except Exception as e:
        print("An error occurred:", e)

import openai

def query_gpt_with_excel(user_question, excel_data):
    # 엑셀 데이터를 문자열로 변환
    excel_content = excel_data.to_csv(index=False)

    # OpenAI에 보낼 프롬프트 생성
    prompt = f"""
    엑셀 파일이 하나 있어:
    {excel_content}

    이 데이터를 이용해서 질문에 대답해줘:
    {user_question}
    """

    # OpenAI API 호출
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "엑셀 파일에 있는 ID가 2인 사람의 정보를 이용해서 맞춤형 식단을 짜주고 재료와 자세한 레시피를 알려주고 재료별로 실제 상품까지 추천해줘"},
            {"role": "user", "content": prompt}
        ]
    )

    # 응답 반환
    return response['choices'][0]['message']['content']

# 사용자 질문 예시
user_question = "나의 정보를 고려해서 한 끼 식단을 짜줘"

# GPT-4로 질문 보내기
answer = query_gpt_with_excel(user_question, data)

# 결과 출력
print(answer)

print("수정을 원하는 부분이 있으면 알려주세요!")
while True:
    user_question = input("질문: ")

    if user_question.lower() == "exit":
        print("이용해 주셔서 감사합니다!")
        break

    try:
        # GPT-4로 질문 보내기
        answer = query_gpt_with_excel(user_question, data)
        print("Answer:", answer)
    except Exception as e:
        print("An error occurred:", e)
